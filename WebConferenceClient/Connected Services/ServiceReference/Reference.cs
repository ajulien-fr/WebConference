//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.26323.1
// 
namespace WebConferenceClient.ServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/WebConferenceService")]
    public partial class Client : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/WebConferenceService")]
    public partial class Message : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ContentField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService", CallbackContract=typeof(WebConferenceClient.ServiceReference.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/StartSession")]
        System.Threading.Tasks.Task StartSessionAsync(WebConferenceClient.ServiceReference.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/CloseSession")]
        System.Threading.Tasks.Task CloseSessionAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(WebConferenceClient.ServiceReference.Message message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/ConnectionClient")]
        void ConnectionClient(WebConferenceClient.ServiceReference.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/DisconnectionClient")]
        void DisconnectionClient(WebConferenceClient.ServiceReference.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/ReceiveMessage")]
        void ReceiveMessage(WebConferenceClient.ServiceReference.Client client, WebConferenceClient.ServiceReference.Message message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : WebConferenceClient.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClientBase : System.ServiceModel.DuplexClientBase<WebConferenceClient.ServiceReference.IService>, WebConferenceClient.ServiceReference.IService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ServiceClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, ServiceClientBase.GetDefaultBinding(), ServiceClientBase.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, ServiceClientBase.GetBindingForEndpoint(endpointConfiguration), ServiceClientBase.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, ServiceClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, ServiceClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task StartSessionAsync(WebConferenceClient.ServiceReference.Client client) {
            return base.Channel.StartSessionAsync(client);
        }
        
        public System.Threading.Tasks.Task CloseSessionAsync() {
            return base.Channel.CloseSessionAsync();
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(WebConferenceClient.ServiceReference.Message message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IService)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IService)) {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8888/WebConferenceService/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ServiceClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ServiceClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IService);
        }
        
        public enum EndpointConfiguration {
            
            NetTcpBinding_IService,
        }
    }
    
    public class ConnectionClientReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ConnectionClientReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebConferenceClient.ServiceReference.Client client {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebConferenceClient.ServiceReference.Client)(this.results[0]));
            }
        }
    }
    
    public class DisconnectionClientReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DisconnectionClientReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebConferenceClient.ServiceReference.Client client {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebConferenceClient.ServiceReference.Client)(this.results[0]));
            }
        }
    }
    
    public class ReceiveMessageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveMessageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WebConferenceClient.ServiceReference.Client client {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebConferenceClient.ServiceReference.Client)(this.results[0]));
            }
        }
        
        public WebConferenceClient.ServiceReference.Message message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WebConferenceClient.ServiceReference.Message)(this.results[1]));
            }
        }
    }
    
    public partial class ServiceClient : ServiceClientBase {
        
        public ServiceClient(EndpointConfiguration endpointConfiguration) : 
                this(new ServiceClientCallback(), endpointConfiguration) {
        }
        
        private ServiceClient(ServiceClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration) {
            callbackImpl.Initialize(this);
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new ServiceClientCallback(), binding, remoteAddress) {
        }
        
        private ServiceClient(ServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            callbackImpl.Initialize(this);
        }
        
        public ServiceClient() : 
                this(new ServiceClientCallback()) {
        }
        
        private ServiceClient(ServiceClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl)) {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<ConnectionClientReceivedEventArgs> ConnectionClientReceived;
        
        public event System.EventHandler<DisconnectionClientReceivedEventArgs> DisconnectionClientReceived;
        
        public event System.EventHandler<ReceiveMessageReceivedEventArgs> ReceiveMessageReceived;
        
        private void OnConnectionClientReceived(object state) {
            if ((this.ConnectionClientReceived != null)) {
                object[] results = ((object[])(state));
                this.ConnectionClientReceived(this, new ConnectionClientReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnDisconnectionClientReceived(object state) {
            if ((this.DisconnectionClientReceived != null)) {
                object[] results = ((object[])(state));
                this.DisconnectionClientReceived(this, new DisconnectionClientReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnReceiveMessageReceived(object state) {
            if ((this.ReceiveMessageReceived != null)) {
                object[] results = ((object[])(state));
                this.ReceiveMessageReceived(this, new ReceiveMessageReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class ServiceClientCallback : object, IServiceCallback {
            
            private ServiceClient proxy;
            
            public void Initialize(ServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void ConnectionClient(WebConferenceClient.ServiceReference.Client client) {
                this.proxy.OnConnectionClientReceived(new object[] {
                            client});
            }
            
            public void DisconnectionClient(WebConferenceClient.ServiceReference.Client client) {
                this.proxy.OnDisconnectionClientReceived(new object[] {
                            client});
            }
            
            public void ReceiveMessage(WebConferenceClient.ServiceReference.Client client, WebConferenceClient.ServiceReference.Message message) {
                this.proxy.OnReceiveMessageReceived(new object[] {
                            client,
                            message});
            }
        }
    }
}
